Onyx::IndexBuffer Onyx::IndexBuffer::Circle(float angleStepDeg, bool normals)
{
	if (normals)
	{
		float angleStep = Math::Radians(angleStepDeg);

		std::vector<uint>* indices = new std::vector<uint>;
		onyx_add_malloc(indices, false);

		int i = 0;
		for (float ang = 0.0f; ang < Math::TAU; ang += angleStep)
		{
			if (i == 0 || ang + angleStep >= Math::TAU)
			{
				i++;
				continue;
			}
			indices->push_back(i);
			indices->push_back(i + 1);
			indices->push_back(0);
			i++;
		}

		for (int j = i; j < 2 * i - 1; j++)
		{
			indices->push_back(j);
			indices->push_back(j + 1);
			indices->push_back(i);
		}

		return IndexBuffer(indices->data(), indices->size() * sizeof(uint));
	}
	else
	{
		float angleStep = Math::Radians(angleStepDeg);

		std::vector<uint>* indices = new std::vector<uint>;
		onyx_add_malloc(indices, false);

		int i = 0;
		for (float ang = 0.0f; ang < Math::TAU; ang += angleStep)
		{
			if (i == 0 || ang + angleStep >= Math::TAU)
			{
				i++;
				continue;
			}
			indices->push_back(i);
			indices->push_back(i + 1);
			indices->push_back(0);
			i++;
		}

		return IndexBuffer(indices->data(), indices->size() * sizeof(uint));
	}
}